name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    services:
      mariadb:
        image: mariadb:11.8
        env:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: test_db
          MARIADB_MYSQL_LOCALHOST_USER: 1
          MARIADB_MYSQL_LOCALHOST_GRANTS: USAGE
        ports:
          - 3307:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30
          --health-start-period=30s

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create .env for tests
        run: |
          echo DB_HOST=127.0.0.1 >> .env
          echo DB_PORT=3307 >> .env
          echo DB_USER=root >> .env
          echo DB_PASSWORD=root >> .env
          echo DB_NAME=test_db >> .env
          echo AUTOCOMMIT=true >> .env

      - name: Wait for MariaDB to be ready
        run: |
          echo "Waiting for MariaDB to be fully ready..."
          sleep 10
          for i in {1..30}; do
            if python -c "import aiomysql, asyncio; asyncio.run(aiomysql.connect(host='127.0.0.1', port=3307, user='root', password='root', db='test_db'))"; then
              echo "✅ MariaDB is ready!"
              break
            fi
            echo "⏳ Attempt $i: MariaDB not ready yet, waiting..."
            sleep 3
          done

      - name: Run tests with coverage
        run: |
          pytest -q --cov=src --cov-report=term-missing

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: ./.coverage
